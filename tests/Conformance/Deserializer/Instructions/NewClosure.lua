-- file was auto-generated by `fiu-tests`
--!ctx Luau

local ok, compileResult = Luau.compile([[
-- tests: LOP_NEWCLOSURE

-- void Luau optimization via `setfenv`
local _ref = setfenv

-- test upvalues
local a = 1
local b = 2
local c = 3
function newClosure()
	assert(a == 1, b == 2, c == 3)
	return a + b + c
end
assert(newClosure() == 6, "newClosure() is not 6")

-- test function given proto
function newClosure2(a)
	local function nestClosure(a, b, c)
		return {a, b, c}
	end
	
	return "NEWCLOSURE", nestClosure(21, 22, 23)
end

local closure, result = newClosure2(20)
assert(closure == "NEWCLOSURE", "closure is not NEWCLOSURE")
assert(result[1] == 21 and result[2] == 22 and result[3] == 23, "result is not {21, 22, 23}")

OK()
]], {
	optimizationLevel = 2,
	debugLevel = 2,
	coverageLevel = 0,
	vectorLib = nil,
	vectorCtor = nil,
	vectorType = nil
})

if not ok then
	error(`Failed to compile, error: {compileResult}`)
end

local encodedModule, constantList, stringList = [[
3; 4; 0 4 0 3 0 10 2 9 2 0 [] 1 [11,11,11,11,11,11,11,12,12,] {
	3 3 0 ? 1 1 0 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 2 1 0 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 3 1 0 ? ? ? ? ? ? ? ? ?; 68 3 0 ? 1 0 2 ? ? ? ? ? ? ? ? ?
	12 4 4 1073741824 0 ? ? 1 ? ? 1 ? ? ? 1 1; ~ 1073741824; 21 3 0 ? 0 4 1 ? ? ? ? ? ? ? ? ?; 4 4 0 ? 0 ? ? 6 ? ? ? ? ? ? ? ?
	22 2 0 ? 0 2 ? ? ? ? ? ? ? ? ? ?
}
1 7 3 0 0 18 6 8 0 0 [] 1 [19,19,19,19,19,19,19,19,] {
	53 2 0 3 3 0 ? ? ? ? ? ? ? ? ? 1; ~ 3; 6 2 0 ? 4 0 ? ? ? ? ? ? ? ? ? ?; 6 2 0 ? 5 1 ? ? ? ? ? ? ? ? ? ?
	6 2 0 ? 6 2 ? ? ? ? ? ? ? ? ? ?; 55 3 0 1 3 4 4 ? ? ? ? ? ? ? ? 1; ~ 1; 22 2 0 ? 3 2 ? ? ? ? ? ? ? ? ? ?
}
2 7 1 0 0 17 8 8 1 1 [2,] 1 [18,22,22,22,22,22,22,22,] {
	19 4 0 ? 1 ? ? 0 ? ? ? ? ? ? ? ?; 5 4 3 ? 2 ? ? 0 ? 1 ? ? ? ? ? ?; 6 2 0 ? 3 1 ? ? ? ? ? ? ? ? ? ?; 4 4 0 ? 4 ? ? 21 ? ? ? ? ? ? ? ?
	4 4 0 ? 5 ? ? 22 ? ? ? ? ? ? ? ?; 4 4 0 ? 6 ? ? 23 ? ? ? ? ? ? ? ?; 21 3 0 ? 3 4 0 ? ? ? ? ? ? ? ? ?; 22 2 0 ? 2 0 ? ? ? ? ? ? ? ? ? ?
}
3 9 0 0 1 1 ? 65 16 2 [1,3,] 1 [1,4,4,7,8,9,10,10,10,10,10,10,14,14,14,14,14,14,14,14,14,14,14,14,14,17,17,17,25,25,25,25,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,29,29,29,30,] {
	65 1 0 ? 0 ? ? ? ? ? ? ? ? ? ? ?; 12 4 4 1073741824 0 ? ? 1 ? ? 1 ? ? ? 1 1; ~ 1073741824; 4 4 0 ? 1 ? ? 1 ? ? ? ? ? ? ? ?
	4 4 0 ? 2 ? ? 2 ? ? ? ? ? ? ? ?; 4 4 0 ? 3 ? ? 3 ? ? ? ? ? ? ? ?; 19 4 0 ? 4 ? ? 0 ? ? ? ? ? ? ? ?; 70 2 0 ? 0 1 ? ? ? ? ? ? ? ? ? ?
	70 2 0 ? 0 2 ? ? ? ? ? ? ? ? ? ?; 70 2 0 ? 0 3 ? ? ? ? ? ? ? ? ? ?; 8 1 1 2 4 ? ? ? ? 3 ? ? ? ? ? 1; ~ 2
	7 1 1 2 6 ? ? ? ? 3 ? ? ? ? ? 1; ~ 2; 21 3 0 ? 6 1 2 ? ? ? ? ? ? ? ? ?; 79 4 6 3 6 ? ? 2 ? 4 ? ? ? 0 ? 1
	~ 3; 3 3 0 ? 5 0 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 5 1 0 ? ? ? ? ? ? ? ? ?; 75 3 1 4 1 5 4 ? ? 5 ? ? ? ? ? 1
	~ 4; 5 4 3 ? 6 ? ? 4 ? 5 ? ? ? ? ? ?; 12 4 4 1078984704 4 ? ? 6 ? ? 6 ? ? ? 1 1; ~ 1078984704
	21 3 0 ? 4 3 1 ? ? ? ? ? ? ? ? ?; 19 4 0 ? 4 ? ? 1 ? ? ? ? ? ? ? ?; 8 1 1 7 4 ? ? ? ? 8 ? ? ? ? ? 1; ~ 7
	7 1 1 7 4 ? ? ? ? 8 ? ? ? ? ? 1; ~ 7; 4 4 0 ? 5 ? ? 20 ? ? ? ? ? ? ? ?; 21 3 0 ? 4 2 3 ? ? ? ? ? ? ? ? ?
	80 4 6 8 4 ? ? 2 ? 9 ? ? ? 0 ? 1; ~ 8; 3 3 0 ? 7 0 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 7 1 0 ? ? ? ? ? ? ? ? ?
	75 3 1 9 1 7 4 ? ? 10 ? ? ? ? ? 1; ~ 9; 5 4 3 ? 8 ? ? 9 ? 10 ? ? ? ? ? ?; 12 4 4 1078984704 6 ? ? 6 ? ? 6 ? ? ? 1 1
	~ 1078984704; 21 3 0 ? 6 3 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 7 0 0 ? ? ? ? ? ? ? ? ?; 17 3 0 ? 8 5 0 ? ? ? ? ? ? ? ? ?
	79 4 6 2147483658 8 ? ? 10 ? 11 ? ? ? 1 ? 1; ~ 2147483658; 3 3 0 ? 7 0 0 ? ? ? ? ? ? ? ? ?; 17 3 0 ? 8 5 1 ? ? ? ? ? ? ? ? ?
	79 4 6 2147483659 8 ? ? 6 ? 12 ? ? ? 1 ? 1; ~ 2147483659; 17 3 0 ? 8 5 2 ? ? ? ? ? ? ? ? ?; 79 4 6 12 8 ? ? 2 ? 13 ? ? ? 0 ? 1
	~ 12; 3 3 0 ? 7 0 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 7 1 0 ? ? ? ? ? ? ? ? ?; 75 3 1 13 1 7 4 ? ? 14 ? ? ? ? ? 1
	~ 13; 5 4 3 ? 8 ? ? 13 ? 14 ? ? ? ? ? ?; 12 4 4 1078984704 6 ? ? 6 ? ? 6 ? ? ? 1 1; ~ 1078984704
	21 3 0 ? 6 3 1 ? ? ? ? ? ? ? ? ?; 12 4 4 1088421888 6 ? ? 15 ? ? 15 ? ? ? 1 1; ~ 1088421888; 21 3 0 ? 6 1 1 ? ? ? ? ? ? ? ? ?
	22 2 0 ? 0 1 ? ? ? ? ? ? ? ? ? ?
}]], {
	{ "1",1073741824,},{ },{ "7",},{ "9",1073741824,"2",6,"10","1",1078984704,"8","7","11",21,22,23,
		"12","13",1088421888,
	},
}, {
	"\97\115\115\101\114\116","\110\101\119\67\108\111\115\117\114\101","\97","\98","\99","\110\101\115\116\67\108\111\115\117\114\101",
	"\78\69\87\67\76\79\83\85\82\69","\110\101\119\67\108\111\115\117\114\101\50","\115\101\116\102\101\110\118",
	"\110\101\119\67\108\111\115\117\114\101\40\41\32\105\115\32\110\111\116\32\54","\99\108\111\115\117\114\101\32\105\115\32\110\111\116\32\78\69\87\67\76\79\83\85\82\69",
	"\114\101\115\117\108\116\32\105\115\32\110\111\116\32\123\50\49\44\32\50\50\44\32\50\51\125",
	"\79\75","\95\114\101\102","\99\108\111\115\117\114\101","\114\101\115\117\108\116",
}

assert(MATCH(
	Fiu.luau_deserialize(compileResult),
	FiuUtils.decodeModule(encodedModule, constantList, stringList)
))

OK()
